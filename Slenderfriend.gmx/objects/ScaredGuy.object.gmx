<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite7</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>is_mutton_bustin = false;
mutton_timer = 10;
is_freaked_out = false;
moving = true;
rx = 0;
ry = 0;
at_point = true;
chill = false;
draw_capture = false;
my_health = 5;

mhspeed = 0;
mvspeed = 0;

dir = "up";

mutton_friction = 1;

randomize();
if (random(1) &gt;= .5)
{
    chill = true;
}
chill_time = random(7);
alarm[1] = room_speed * chill_time;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//vertical or horizontal?
dir_chk = round(random_range(0,1));

if (dir_chk)
{
    mhspeed = sign(random_range(-1,1)) * floor(random_range(10,15)) / mutton_friction;
    mvspeed = 0;
    
    if (mhspeed &gt; 0)
        dir = "right";
    else
        dir = "left";
}
else
{
    mvspeed = sign(random_range(-1,1)) * floor(random_range(10,15)) / mutton_friction;
    mhspeed = 0;
    
    if (mvspeed &gt; 0)
        dir = "down";
    else
        dir = "up";
}

alarm[2] = floor(random_range(1,2)) * room_speed / 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>at_point = true;

if(!chill)
    chill = true;
else
    chill = false;
    

show_debug_message("Alarm");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!is_mutton_bustin)
{

//get scared
if(distance_to_object(Slenderfriend) &lt; 30)
{
    is_freaked_out = true;
}

//get not scared
if(distance_to_object(Slenderfriend) &gt; 300  &amp;&amp; !moving)
{
    is_freaked_out = false;
    moving = true;
    at_point = true;
    chill = false;
}

if (is_freaked_out)
{
    draw_set_color(c_black);
    draw_text(x+10, y+10, "AHHHHHHHH!!!!");
    move_towards_point(Slenderfriend.x, Slenderfriend.y,-2);
    moving = false;
}

if (moving)
{

    if (distance_to_point(rx, ry) &lt; 2)
    {
        at_point = true;
    }
    
    if (at_point)
    {
        randomize();
        draw_text(x + 20, y + 20, "At point");
        rx = floor(random(room_width));
        ry = floor(random(room_height));
        at_point = false;
        alarm[1] = room_speed * chill_time;
    }
    if (!chill)
        move_towards_point(rx,ry,1);
    if (chill)
        move_towards_point(0,0,0);
}

if (distance_to_object(Slenderfriend) &lt; 10)
{
    draw_capture = true;
}
else
{
    draw_capture = false;
}

if (draw_capture &amp;&amp; keyboard_check(ord("R")))
{
    instance_destroy();
    score_keeper.self_esteem += score_keeper.friend_add;
    score_keeper.friend_count += 1;
}
}


if (is_mutton_bustin)
{
    if (mutton_timer == 10)
    {
        //goooooooooo! :)
        
        //recent ai path logic
        move_towards_point(0,0,0);
        alarm[2] = 1;
    }
    
    if (mutton_timer &lt;= 0)
    {
        is_mutton_bustin = false;
        Slenderfriend.ride_along = false;
        mutton_timer = 10;
    }
    
    x += mhspeed;
    y += mvspeed;   
    
    mutton_timer -= 1 / room_speed;
}


//stay in bounds
if (x &gt;= room_width - sprite_width)
    x = room_width - sprite_width;

if (x &lt;= 0)
    x = 0;

if (y &gt;= room_height - sprite_height)
    y = room_height - sprite_height;

if (y &lt;= 0)
    y = 0;
    

//regenerate health
if (is_freaked_out &amp;&amp; my_health &lt;= 5)
    my_health += .5 / room_speed;
else if (my_health &lt;= 5)
    my_health += 1 / room_speed;

if (my_health &lt;= 0)
{
    instance_destroy();
    Slenderfriend.ride_along = false;
}

if (mutton_friction &gt;= 3)
{
    instance_destroy();
    Slenderfriend.ride_along = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(draw_capture)
{
    draw_set_color(c_black);
    draw_text(x, y-25, "Press R to capture");
}
else if (is_freaked_out)
{
    draw_set_color(c_black);
    draw_text(x, y-25, "AHHHHHHHH!!!!");
}
else if (chill)
{
    draw_set_color(c_black);
    draw_text(x, y-25, "chill");
    }
else if (!chill)
{
    draw_set_color(c_black);
    draw_text(x, y-25, "not chill");
}

draw_text(x, y+40, string(my_health));

if (is_mutton_bustin)
{
    draw_text(x,y-50,string(mutton_timer) + " " + string(mutton_friction));
}

image_alpha = 1 - (2 * (5 - my_health)/10);

draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
