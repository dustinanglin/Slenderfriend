<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite8</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>slender_speed = 20;
alarm[0] = room_speed/6;
moving = false;
lumber = false;
started_moving = false;
show_attack = false;
slender_punch = .5 * room_speed;
ride_along = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (moving)
{
    alarm[0] = room_speed/6;
    if (lumber)
    {
        slender_speed = 2;
        lumber = false;
    }
    else
    {
        slender_speed = 5;
        lumber = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

moving = true;

if (keyboard_check(ord("W")) &amp;&amp; keyboard_check(ord("D")))
{x+=(slender_speed)/2; y-=(slender_speed/2); 
if (!started_moving)
    {
       started_moving = true;
       alarm[0] = room_speed/6;
    }
}

else if (keyboard_check(ord("W")) &amp;&amp; keyboard_check(ord("A")))
{x-=(slender_speed)/2; y-=(slender_speed)/2; 
if (!started_moving)
    {
       started_moving = true;
       alarm[0] = room_speed/6;
    }
}

else if (keyboard_check(ord("S")) &amp;&amp; keyboard_check(ord("D")))
{x+=(slender_speed)/2; y+=(slender_speed)/2; 
if (!started_moving)
    {
       started_moving = true;
       alarm[0] = room_speed/6;
    }
}

else if (keyboard_check(ord("S")) &amp;&amp; keyboard_check(ord("A")))
{x-=(slender_speed)/2; y+=(slender_speed)/2;
if (!started_moving)
    {
       started_moving = true;
       alarm[0] = room_speed/6;
    }
  }

else if keyboard_check(ord("W"))
{x+=0; y-=slender_speed; 
if (!started_moving)
    {
       started_moving = true;
       alarm[0] = room_speed/6;
    }
}

else if keyboard_check(ord("A"))
{x-=slender_speed; y-=0; 
if (!started_moving)
    {
       started_moving = true;
       alarm[0] = room_speed/6;
    }
}

else if keyboard_check(ord("S"))
{x+=0; y+=slender_speed; 
if (!started_moving)
    {
       started_moving = true;
       alarm[0] = room_speed/6;
    }
}

else if keyboard_check(ord("D"))
{x+=slender_speed; y-=0; 
if (!started_moving)
    {
       started_moving = true;
       alarm[0] = room_speed/6;
    }
}

else
{
   moving = false;
   started_moving = false;
}

if (!ride_along)
{
    near_friend = instance_nearest(x,y,ScaredGuy);
}

if (distance_to_object(near_friend) &lt; 10 )
{
    show_attack = true;
}
else
    show_attack = false;


if (show_attack &amp;&amp; keyboard_check_pressed(ord("P")))
{
    near_friend.my_health -= slender_punch / room_speed;
}

if (show_attack &amp;&amp; keyboard_check_pressed(ord("M")))
{
    near_friend.is_mutton_bustin = true;
    near_friend.mutton_timer = 10;
    show_debug_message("Bust some mutton!");
    ride_along = true;
}


if (ride_along == true)
{
    switch(near_friend.dir)
    {
        case "up":
        x = near_friend.x;
        y = near_friend.y + 50;
        if (keyboard_check(ord("S")))
            near_friend.mutton_friction += 1/room_speed;
        break;
        
        case "down":
        x = near_friend.x;
        y = near_friend.y - 50;
        if (keyboard_check(ord("W")))
            near_friend.mutton_friction += 1/room_speed;
        break;
        
        case "left":
        x = near_friend.x + 50;
        y = near_friend.y;
        if (keyboard_check(ord("D")))
            near_friend.mutton_friction += 1/room_speed;
        break;
        
        case "right":
        x = near_friend.x - 50;
        y = near_friend.y;
        if (keyboard_check(ord("A")))
            near_friend.mutton_friction += 1/room_speed;
        break;
    }
}

if (x &lt; 0)
{
     show_debug_message("going to next room");
     room_goto(next_room);
}
        

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (show_attack)
{
draw_set_color(c_black);
draw_text(x, y - 20, "Attack!");
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
