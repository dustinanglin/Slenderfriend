<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Slender_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>slender_speed = 2;
set_clingy_friend = false;
alarm[0] = room_speed/6;
moving = false;
lumber = false;
started_moving = false;
show_attack = false;
slender_punch = 1;
ride_along = false;
just_stopped = true;
image_speed = 0;
image_index = 0;
clingy_attack = false;
clingy_friend = 0;
current_room = start_room;
draw_teleport = false;
prev_x = x;
prev_y = y;
in_friendzone = false;

hide_and_seek = false;

prev_room = "";

pers = true;
should_reset = false;

delta = 0;

friction_value = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_alpha &gt; 0)
{
    image_alpha -= .2;
}
else
{
    if (room != friendzone)
    {
        room_goto(friendzone);
        score_keeper.pause = true;
        Slenderfriend.x = 512;
        Slenderfriend.y = 400;
        in_friendzone = true;
    }
    else
    {
        room_goto(Slenderfriend.current_room);
        score_keeper.pause = false;
        Slenderfriend.x = prev_x;
        Slenderfriend.y = prev_y;
        in_friendzone = false;
    }
        
    draw_teleport = false;
    image_alpha = 1;
    image_speed = .4;
    sprite_index = Slender_idle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = .5;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (moving)
{
    alarm[0] = room_speed/6;
    if (lumber)
    {
        slender_speed = 2 + delta;
        image_speed = .4;
        lumber = false;
    }
    else
    {
        slender_speed = 5 + delta;
        image_speed = .6;
        lumber = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_yscale = 1;

if (!global.gameover)
{

if (!draw_teleport)
{
moving = true;

if (keyboard_check(ord("W")) &amp;&amp; keyboard_check(ord("D")))
{x+=(slender_speed)/2; y-=(slender_speed/2); 

sprite_index = Slender_bound;
image_xscale = -1;

if (image_index &gt;= 25)
{
        image_index = 12;
}

    
if (!started_moving)
    {
       image_index = 0;
       image_speed = .4;
       started_moving = true;
       just_stopped = true;
       alarm[0] = room_speed/6;
    }
}

else if (keyboard_check(ord("W")) &amp;&amp; keyboard_check(ord("A")))
{x-=(slender_speed)/2; y-=(slender_speed)/2; 

sprite_index = Slender_bound;
image_xscale = 1;
       
if (image_index &gt;= 25)
{
        image_index = 12;
}
    
if (!started_moving)
    {

       image_index = 0;
       image_speed = .4;
       started_moving = true;
       just_stopped = true;
       alarm[0] = room_speed/6;
    }
}

else if (keyboard_check(ord("S")) &amp;&amp; keyboard_check(ord("D")))
{
x+=(slender_speed)/2; y+=(slender_speed)/2;

sprite_index = Slender_bound;
image_xscale = -1;
 
if (image_index &gt;= 25)
{
        image_index = 12;
}
    
if (!started_moving)
    {
       image_index = 0;
       image_speed = .4;
       started_moving = true;
       just_stopped = true;
       alarm[0] = room_speed/6;
    }
}

else if (keyboard_check(ord("S")) &amp;&amp; keyboard_check(ord("A")))
{x-=(slender_speed)/2; y+=(slender_speed)/2;

sprite_index = Slender_bound;
image_xscale = 1;

if (image_index &gt;= 25)
{
        image_index = 12;
}
    
if (!started_moving)
    {
       image_index = 0;
       image_speed = .4;
       started_moving = true;
       just_stopped = true;
       alarm[0] = room_speed/6;
    }
  }

else if keyboard_check(ord("W"))
{x+=0; y-=slender_speed; 
sprite_index = Slender_bound;
image_xscale = -1;
 
if (image_index &gt;= 25)
{
        image_index = 12;
}
    
if (!started_moving)
    {
       image_index = 0;
       image_speed = .4;
       started_moving = true;
       just_stopped = true;
       alarm[0] = room_speed/6;
    }
}

else if keyboard_check(ord("A"))
{
x-=slender_speed; y-=0; 

sprite_index = Slender_bound;
image_xscale = 1;

if (image_index &gt;= 25)
{
        image_index = 12;
}
    
if (!started_moving)
    {
       image_speed = .4;
       started_moving = true;
       just_stopped = true;
       alarm[0] = room_speed/6;
    }
}

else if keyboard_check(ord("S"))
{x+=0; y+=slender_speed; 
sprite_index = Slender_bound;
image_xscale = 1;
 
if (image_index &gt;= 25)
{
        image_index = 12;
}
    
if (!started_moving)
    {
       image_index = 0;
       image_speed = .4;
       started_moving = true;
       just_stopped = true;
       alarm[0] = room_speed/6;
    }
}

else if keyboard_check(ord("D"))
{x+=slender_speed; y-=0; 

sprite_index = Slender_bound;
image_xscale = -1;

if (image_index &gt;= 25)
{
        image_index = 12;
}
    
if (!started_moving)
    {
       image_speed = .4;
       started_moving = true;
       just_stopped = true;
       alarm[0] = room_speed/6;
    }
}
else
{
   moving = false;
   started_moving = false;
   if (just_stopped)
   {
    sprite_index = Slender_idle;
    image_index = 0;
    alarm[1] = room_speed * floor(random_range(3,6));
    just_stopped = false
   }
   
   if (image_index &gt;= 40)
    {
    image_index = 0;
    image_speed = 0;
    alarm[1] = room_speed * floor(random_range(4,7));
    }
}



if (!ride_along)
{
    if (set_clingy_friend)
    {
        set_clingy_friend = false;
        clingy_friend = instance_nearest(x,y,ScaredGuy);
    }

    if (clingy_attack &amp;&amp; (instance_nearest(x,y,ScaredGuy) != clingy_friend))
    {
        near_friend = instance_nearest(x,y,ScaredGuy);
        show_debug_message("Near friend: " + string(near_friend));
        show_debug_message("Clingy friend: " + string(clingy_friend));
    }
    
    if (!clingy_attack)
         near_friend = instance_nearest(x,y,ScaredGuy);
}

if (distance_to_object(near_friend) &lt; 10)
{
    if (near_friend != clingy_friend)
        show_attack = true;
}
else
    show_attack = false;

if (show_attack &amp;&amp; keyboard_check_pressed(ord("J")))
{
    /*near_friend.is_clingy = true;
    clingy_friend = near_friend;
    clingy_attack = true;
    show_debug_message("Clingy friend attack!");*/
}

if (show_attack &amp;&amp; keyboard_check_pressed(ord("J")) &amp;&amp; !in_friendzone)
{
    near_friend.is_punched = true;
    
    if (clingy_attack)
    {
        if(clingy_friend != near_friend)
        {
            clingy_friend.is_betrayed = true;
            score_keeper.increment = true;
            score_keeper.amount = global.friend_value[1];
            clingy_attack = false;
        }
    }
}

if (show_attack &amp;&amp; keyboard_check_pressed(ord("M")))
{

}



if (ride_along == true)
{
    switch(near_friend.dir)
    {
        case "up":
        x = near_friend.x;
        y = near_friend.y + 50;
        image_yscale = 1;
        sprite_index = slender_drag_v;
        if (keyboard_check(ord("S")))
            near_friend.mutton_friction += slender_punch/room_speed;
        break;
        
        case "down":
        x = near_friend.x;
        y = near_friend.y - 50;
        image_yscale = -1;
        sprite_index = slender_drag_v;
        if (keyboard_check(ord("W")))
            near_friend.mutton_friction += slender_punch/room_speed;
        break;
        
        case "left":
        x = near_friend.x + 50;
        y = near_friend.y + 16;
        image_xscale = 1;
        sprite_index = slender_drag;
        if (keyboard_check(ord("D")))
            near_friend.mutton_friction += slender_punch/room_speed;
        break;
        
        case "right":
        x = near_friend.x - 50;
        y = near_friend.y + 16;
        sprite_index = slender_drag;
        image_xscale = -1;
        if (keyboard_check(ord("A")))
            near_friend.mutton_friction += 1/room_speed;
        break;
    }
}

if (should_reset)
{
    room_persistent = false;
    room_restart();
    should_reset = false;
    tile_drawer.draw = true;
}
        

if(keyboard_check_pressed(ord("U")))
{
    delta += 1;
}

if(keyboard_check_pressed(ord("F")))
{
    if (room != friendzone)
    {
        Slenderfriend.current_room = room;
        prev_x = x;
        prev_y = y;
    }
        
    draw_teleport = true;   
}
}
else if (draw_teleport)
{
    sprite_index = slenderport;
    image_speed = 1;
    if (alarm[2] &lt; 0)
    {
        alarm[2] = .2 * room_speed;
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;


//draw_set_blend_mode(bm_add);
draw_sprite_ext(light,0,x,y,1.5,1.5,0,-1,.25);

draw_set_blend_mode(bm_normal);
draw_self();

if(ride_along)
{
   switch(near_friend.dir)
    {
        case "up":
        draw_sprite_ext(red_arrow,0,x,y+120,.5,.5,0,-1,1);
        break;
        
        case "down":
        draw_sprite_ext(red_arrow,0,x,y-120,.5,-.5,0,-1,1);
        break;
        
        case "left":
        draw_sprite_ext(red_arrow,0,x+120,y,.5,.5,90,-1,1);
        break;
        
        case "right":
        draw_sprite_ext(red_arrow,0,x-120,y,.5,.5,270,-1,1);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
